[
  {
    "title": "The zero max",
    "body": "Return a version of the given array where each zero value in the array is replaced by the\n    largest odd value to the right of the zero in the array.\n    If there is no odd value to the right of the zero, leave the zero as a zero.",
    "example": "zeroMax([0, 5, 0, 3]) → [5, 5, 3, 3] \n zeroMax([0, 4, 0, 3]) → [3, 4, 3, 3] \n zeroMax([0, 1, 0]) → [1, 1, 0]",
    "level": "easy",
    "solution": {
      "content": "public int[] zeroMax(final int[] inputArray) {\n        int maxValue = Integer.MIN_VALUE;\n\n        int[] result = Arrays.copyOf(inputArray, inputArray.length);\n\n        Objects.requireNonNull(inputArray, \"Input array must not be null\");\n\n        if (inputArray.length < 2) {\n            return new int[0];\n        }\n\n        for (int i = result.length - 1; i >= 0; i--) {\n            if (result[i] % 2 != 0) {\n                maxValue = Math.max(maxValue, result[i]);\n            }\n\n            if (result[i] == 0 && maxValue != Integer.MIN_VALUE) {\n                result[i] = maxValue;\n            }\n        }\n        return result;\n    }"
    }
  },
  {
    "title": "The Reverse integer",
    "body": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.",
    "example": "Input: x = 123, Output: 321; Input: x = -123, Output: -321; Input: x = 120, Output: 21",
    "level": "medium",
    "solution": {
      "content": "public Integer reverseNumbers(Integer number) {\n        var reverse = 0L;\n        var digit = 0;\n\n        while (number != 0) {\n            digit = number % 10;\n            reverse = reverse * 10 + digit;\n            number /= 10;\n        }\n\n        if (reverse > Integer.MAX_VALUE || reverse < Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        return (int) reverse;\n    }"
    }
  },
  {
    "title": "The two sum",
    "body": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n You may assume that each input would have exactly one solution, and you may not use the same element twice.\n You can return the answer in any order.",
    "example": "Input: nums = [2,7,11,15], target = 9, Output: [0,1], Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]; Input: nums = [3,2,4], target = 6, Output: [1,2]; Input: nums = [3,3], target = 6, Output: [0,1]",
    "level": "easy",
    "solution": {
      "content": "public int[] findTwoSum(final int[] inputArray, final int target) {\n        Objects.requireNonNull(inputArray, \"Input array must not be null\");\n\n        if (inputArray.length < 2) {\n            throw new IllegalArgumentException(\"Input array must contain at least two elements\");\n        }\n\n        HashMap<Integer, Integer> lookup = new HashMap<>();\n\n        for (int i = 0; i < inputArray.length; i++) {\n            int complement = target - inputArray[i];\n            if (lookup.containsKey(complement)) {\n                return new int[]{lookup.get(complement), i};\n            }\n\n            lookup.put(inputArray[i], i);\n\n        }\n        throw new IllegalArgumentException(\"No two elements sum up to the target\");\n    }"
    }
  },
  {
    "title": "Palindrome Number",
    "body": "Given an integer x, return true if x is a \npalindrome\n, and false otherwise. Input: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.",
    "example": "Input: x = 121, Output: true, Explanation: 121 reads as 121 from left to right and from right to left; Input: x = -121, Output: false, Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.",
    "level": "easy",
    "solution": {
      "content": "public boolean checkPalindromeNumber(final int number) {\n        if (number < 0 || (number != 0 && number % 10 == 0)) {\n            return false;\n        }\n\n        int reversed = 0;\n        int n = number;\n\n        while (n != 0) {\n            int digit = n % 10;\n            reversed = reversed * 10 + digit;\n            n /= 10;\n        }\n\n        return reversed == number;\n    }"
    }
  },
  {
    "title": "Longest Common Prefix",
    "body": "Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\"",
    "example": "Input: strs = [\"flower\",\"flow\",\"flight\"], Output: \"fl\"; Input: strs = [\"dog\",\"racecar\",\"car\"], Output: \"\", Explanation: There is no common prefix among the input strings.",
    "level": "easy",
    "solution": {
      "content": "public String findLongestSubstringWithoutRepeatingCharacters(final String inputText) {\n        Objects.requireNonNull(inputText, \"The sentence cannot be null\");\n\n        final String trimmed = inputText.toLowerCase().trim();\n\n        if (trimmed.isEmpty()) {\n            throw new IllegalArgumentException(\"The sentence contains only spaces\");\n        }\n\n        boolean hasLetter = trimmed.chars().anyMatch(Character::isAlphabetic);\n\n        if (!hasLetter) {\n            throw new IllegalArgumentException(\"The sentence contains no letters\");\n        }\n\n        final String[] inputStringArray = trimmed.split(\"\\\\s+\");\n\n        if (inputStringArray.length < 2) {\n            throw new IllegalArgumentException(\"The sentence must contain at least two words.\");\n        }\n\n        String prefix = inputStringArray[0];\n\n        for (String item : inputStringArray) {\n            while (item.indexOf(prefix) != 0) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if (prefix.isEmpty()) {\n                    return \"\";\n                }\n            }\n        }\n        return prefix;\n    }"
    }
  },
  {
    "title": "Valid Parentheses",
    "body": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. ",
    "example": "Input: s = \"()\", Output: true; Input: s = \"()[]{}\", Output: true; Input: s = \"(]\", Output: false",
    "level": "easy",
    "solution": {
      "content": "Objects.requireNonNull(text, \"The sentence cannot be null\");\n\n        String trimmed = text.trim();\n\n        if (trimmed.isEmpty()) {\n            throw new IllegalArgumentException(\"The sentence contains only white spaces\");\n        }\n\n        Deque<Character> deque = new ArrayDeque<>();\n\n        for (char symbol : trimmed.toCharArray()) {\n            switch (symbol) {\n                case '(', '{', '[' -> {\n                    deque.push(switch (symbol) {\n                        case '(' -> ')';\n                        case '{' -> '}';\n                        case '[' -> ']';\n                        default -> throw new IllegalStateException(\"Unexpected opening bracket: \" + symbol);\n                    });\n                }\n                case ')', '}', ']' -> {\n                    if (deque.isEmpty() || deque.pop() != symbol) {\n                        return false;\n                    }\n                }\n                default -> {\n                    // Skip non-bracket characters\n                }\n            }\n        }\n\n        return deque.isEmpty();\n    }"
    }
  },
  {
    "title": "Find the Index of the First Occurrence in a String",
    "body": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "example": "Input: haystack = \"sadbutsad\", needle = \"sad\", Output: 0, Explanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0; Input: haystack = \"leetcode\", needle = \"leeto\", Output: -1, Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1",
    "level": "easy"
  },
  {
    "title": "Search Insert Position",
    "body": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.",
    "example": "Input: nums = [1,3,5,6], target = 5, Output: 2; Input: nums = [1,3,5,6], target = 2, Output: 1; Input: nums = [1,3,5,6], target = 7, Output: 4",
    "level": "easy"
  },
  {
    "title": "Plus One",
    "body": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's. \n Increment the large integer by one and return the resulting array of digits.",
    "example": "Input: digits = [1,2,3], Output: [1,2,4], Explanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\n Thus, the result should be [1,2,4]; Input: digits = [4,3,2,1], Output: [4,3,2,2], Explanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\n Thus, the result should be [4,3,2,2]",
    "level": "easy",
    "solution": {
      "content": "public int[] plusOne(final int[] digits) {\n        Objects.requireNonNull(digits, \"The array cannot be null\");\n\n        for (int i = digits.length - 1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i]++;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n\n        int[] result = new int[digits.length + 1];\n        result[0] = 1;\n        return result;\n    }"
    }
  },
  {
    "title": "Concatenate two arrays in Java",
    "body": "Concatenate two arrays  with the standard Java API",
    "example": "String[] strArray1 = {\"element 1\", \"element 2\", \"element 3\"}; String[] strArray2 = {\"element 4\", \"element 5\"}; result = String[] expectedStringArray = {\"element 1\", \"element 2\", \"element 3\", \"element 4\", \"element 5\"}; int[] intArray1 = { 0, 1, 2, 3 };\nint[] intArray2 = { 4, 5, 6, 7 };\nint[] expectedIntArray = { 0, 1, 2, 3, 4, 5, 6, 7 };",
    "level": "easy",
    "solution": {
      "content": "public static void additionOfArrays(final int[] firstArray, final int[] secondArray) {\n        IntStream\n                .concat(Arrays.stream(firstArray), Arrays.stream(secondArray))\n                .distinct()\n                .sorted()\n                .forEach(System.out::print);\n    }"
    }
  },
  {
    "title": "Count Character Frequencies",
    "body": "Write a method that takes a string and returns a Map<Character, Integer> representing the frequency of each character (ignore spaces and case sensitivity).",
    "example": "Input: \"Programming\"\nOutput: {r=2, o=1, g=2, a=1, m=2, i=1, n=1, p=1}",
    "level": "easy",
    "solution": {
      "content": "public Map<Character, Integer> countCharacterFrequencies(final String sentence) {\n        final Map<Character, Integer> frequencyMap = new HashMap<>();\n\n        Objects.requireNonNull(sentence, \"The sentence cannot be null\");\n\n        final String trimmed = sentence.trim();\n\n        if (trimmed.isEmpty()) {\n            throw new IllegalArgumentException(\"The sentence contains only spaces\");\n        }\n\n        boolean hasLetter = trimmed.chars().anyMatch(Character::isAlphabetic);\n\n        if (!hasLetter) {\n            throw new IllegalArgumentException(\"The sentence contains no letters\");\n        }\n\n        for (final char symbol : trimmed.toCharArray()) {\n            if (Character.isAlphabetic(symbol)) {\n                char c = Character.toLowerCase(symbol);\n                frequencyMap.merge(c, 1, Integer::sum);\n            }\n        }\n        return frequencyMap;\n    }"
    }
  },
  {
    "title": "Binary Search",
    "body": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.\n\n",
    "example": "Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4; Input: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1",
    "level": "easy",
    "solution": {
      "content": "private static int binarySearch(int[] sortedArray, int target) {\n        int left = 0;\n        int right = sortedArray.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (sortedArray[mid] == target) {\n                result = mid;\n                right = mid - 1;\n            } else if (sortedArray[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return result;\n    }"
    }
  },
  {
    "title": "Check Bubble Sort",
    "body": "Take 10 numbers and shuffle them into a random order.  Your goal is to sort the numbers into ascending numerical order as shown below, using a bubble sort.\n",
    "example": "[7, 12, 9, 11, 3] => [3, 7, 9, 11, 12]",
    "level": "easy",
    "solution": {
      "content": "public int[] bubbleSort(final int[] inputArray) {\n        Objects.requireNonNull(inputArray, \"The array cannot be null\");\n\n        if (inputArray.length < 2) {\n            throw new IllegalArgumentException(\"The array should contain min 2 elements\");\n        }\n\n        boolean swaped = true;\n\n        final int length = inputArray.length;\n\n        for (int i = 0; i < length - 1 && swaped; i++) {\n            swaped = false;\n\n            for (int j = 0; j < length - i - 1; j++) {\n                if (inputArray[j] > inputArray[j + 1]) {\n                    int temp = inputArray[j];\n                    inputArray[j] = inputArray[j + 1];\n                    inputArray[j + 1] = temp;\n                    swaped = true;\n                }\n            }\n        }\n\n        return inputArray;\n    }"
    }
  },
  {
    "title": "Calculate Character",
    "body": "Count the number of occurrences of a char in a String in Java",
    "example": "test => {t-2, e-1, s-1}",
    "level": "easy"
  },
  {
    "title": "Compare Version Numbers",
    "body": "Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros.\n\nTo compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0. \n Return the following:\n\nIf version1 < version2, return -1.\nIf version1 > version2, return 1.\nOtherwise, return 0.",
    "example": "Input: version1 = \"1.2\", version2 = \"1.10\"\n\nOutput: -1\n\nExplanation:\n\nversion1's second revision is \"2\" and version2's second revision is \"10\": 2 < 10, so version1 < version2.   Input: version1 = \"1.01\", version2 = \"1.001\"\n\nOutput: 0\n\nExplanation:\n\nIgnoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".  Input: version1 = \"1.0\", version2 = \"1.0.0.0\"\n\nOutput: 0\n\nExplanation:\n\nversion1 has less revisions, which means every missing revision are treated as \"0\".",
    "level": "easy",
    "solution": {
      "content": "public int compareVersions(final String version1, final String version2) {\n        Objects.requireNonNull(version1, \"Version1 cannot be null\");\n        Objects.requireNonNull(version2, \"Version2 cannot be null\");\n\n        if (version1.isEmpty() || version2.isEmpty()) {\n            throw new IllegalArgumentException(\"Version strings cannot be empty\");\n        }\n\n        final String[] v1Parts = version1.split(\"\\\\.\");\n        final String[] v2Parts = version2.split(\"\\\\.\");\n\n        final int maxLength = Math.max(v1Parts.length, v2Parts.length);\n\n        for (int i = 0; i < maxLength; i++) {\n            int v1 = i < v1Parts.length ? Integer.parseInt(v1Parts[i]) : 0;\n            int v2 = i < v2Parts.length ? Integer.parseInt(v2Parts[i]) : 0;\n\n            if (v1 != v2) {\n                return Integer.compare(v1, v2);\n            }\n        }\n\n        return 0;\n    }"
    }
  },
  {
    "title": "Duplicate elements array and remove",
    "body": "Find all duplicates elements in array and remove them. Return a new array",
    "example": "{1,1,2,2,3,4,5,6} => result = {1,2,3,4,5,6}",
    "level": "easy"
  },
  {
    "title": "Factorial",
    "body": "Create a function for the finding the factorial",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Fibonacci Series Generator",
    "body": "Create a Java method that prints the first n numbers of the Fibonacci sequence, where n is a positive integer parameter passed to the method.",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Find Duplicates in array",
    "body": "Find all duplicates in array an return them in the a new array",
    "example": "{1,1,2,2,3} => result = {1,2}",
    "level": "easy"
  },
  {
    "title": "Find Duplicates In Arrays",
    "body": "Find all duplicates in arrays an return them in the a new array",
    "example": "array1 = {1,2,3,4}, array1 = {1,2,3,5} => result =  {1,2,3}",
    "level": "easy"
  },
  {
    "title": "Find sum of elements",
    "body": "Calculate all elements in the array and return a result",
    "example": "{1,2,3} => result = 6",
    "level": "easy"
  },
  {
    "title": "FizzBuzz. Loop and Stream.",
    "body": "Given an integer n, return a string array answer (1-indexed) where: answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5 \n, answer[i] == \"Fizz\" if i is divisible by 3 \n, answer[i] == \"Buzz\" if i is divisible by 5 \n, answer[i] == i (as a string) if none of the above conditions are true \n",
    "example": "Input: n = 3, Output: [\"1\",\"2\",\"Fizz\"] \n; Input: n = 5, Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n; Input: n = 15, Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n;",
    "level": "easy"
  },
  {
    "title": "Flip array",
    "body": "Returns an array in flip order",
    "example": "{1,2,3,4} => {4,3,2,1}",
    "level": "easy"
  },
  {
    "title": "Length in array",
    "body": "Count a length array",
    "example": " {1,2,3,4}  result = 4",
    "level": "easy"
  },
  {
    "title": "LuckyTicket. With arguments string and numeric",
    "body": "Bus ticket numbers consist of 6 decimal digits. It is considered lucky when the sum of the first three digits equals the sum of the last three digits. ",
    "example": "123321 = > is lucky, 123322 => is not lucky",
    "level": "easy"
  },
  {
    "title": "Matrix diagonal sum",
    "body": "Given a square matrix mat, return the sum of the matrix diagonals.\n\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.",
    "example": "Input: mat = [[1,2,3],\n              [4,5,6],\n              [7,8,9]], Output: 25\nExplanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25; Input: mat = [[1,1,1,1],\n              [1,1,1,1],\n              [1,1,1,1],\n              [1,1,1,1]], Output: 8; Input: mat = [[5]], Output: 5",
    "level": "easy"
  },
  {
    "title": "Merge arrays",
    "body": "The merge two arrays",
    "example": "array1 = {1,2,3}, array2= {4,5,6}, result = {1,2,3,4,5,6}",
    "level": "easy"
  },
  {
    "title": "Find min and max values in array",
    "body": "Given an array of size N. The task is to find the maximum and the minimum element of the array using the minimum number of comparisons.",
    "example": "nput: arr[] = {3, 5, 4, 1, 9}\nOutput: Minimum element is: 1\n              Maximum element is: 9; Input: arr[] = {22, 14, 8, 17, 35, 3}\nOutput:  Minimum element is: 3\n              Maximum element is: 35",
    "level": "easy"
  },
  {
    "title": "Missing Number",
    "body": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
    "example": "Example 1:\n\nInput: nums = [3,0,1]\n\nOutput: 2\n\nExplanation:\n\nn = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.; Example 2:\n\nInput: nums = [0,1]\n\nOutput: 2\n\nExplanation:\n\nn = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.Example 3:\n\nInput: nums = [9,6,4,2,3,5,7,0,1]\n\nOutput: 8\n\nExplanation:\n\nn = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.",
    "level": "easy"
  },
  {
    "title": "Move zeroes",
    "body": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.",
    "example": "Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]; Input: nums = [0]\nOutput: [0]",
    "level": "easy"
  },
  {
    "title": "Find Number of Element. Line Method.",
    "body": "Need to find index element in the array",
    "example": "{10,20,30,40} => target = 30, result = 2, because this is a index of element 30",
    "level": "easy"
  },
  {
    "title": "ParseString. Full version",
    "body": "Parse the string and get all numbers from the string. Divide elements into two arrays. In the first array, only even numbers and in the second, only odd numbers. In the first array, sort by natural order, and second sort in reverse order. ",
    "example": "text = f1f10d3f4f5f9f0f6, result => {1,4,6,10}, {9,5,3}",
    "level": "easy"
  },
  {
    "title": "Valid Palindrome. The argument string and numeric",
    "body": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string s, return true if it is a palindrome, or false otherwise.",
    "example": "Input: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome. Input: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome. Input: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.",
    "level": "easy"
  },
  {
    "title": "Quick Sort",
    "body": "Quicksort is a divide-and-conquer algorithm",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Remove First Letter from ich word from list and sort",
    "body": "Remove the first character",
    "example": "{Tony, Anna, Tom}, result => {nna, ony, om}",
    "level": "easy"
  },
  {
    "title": "Reverse string",
    "body": "Write a function that reverses a string. The input string is given as an array of characters s.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.",
    "example": "Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]; Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]",
    "level": "easy"
  },
  {
    "title": "Selection Sort",
    "body": "Implement Selection Sort is a comparison-based sorting algorithm",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Singleton",
    "body": "Implement a singleton pattern",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Stack",
    "body": "Implement stack",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Queue",
    "body": "Implement queue",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Remove one array from another array",
    "body": "Implement function for remove all the elements of the array1 from array2",
    "example": "elements in first array [100, 200, 300, 400, 500, 600]\nelements in second array [300, 500]\nfirst array after removing second array from first array\n[100, 200, 400, 600]",
    "level": "easy"
  },
  {
    "title": "Find second min and max value in array",
    "body": "Given an array arr[] of size N, find the second max and second smallest element in an array.",
    "example": "nput: arr[] = {12, 13, 1, 10, 34, 1}; Output: 10 13",
    "level": "easy"
  },
  {
    "title": "Count words in String",
    "body": "Given a string, count the number of words in it. The words are separated by the following characters: space (' ') or new line ('\\n') or tab ('\\t') or a combination of these.",
    "example": "text = Hello world, result = 2",
    "level": "easy"
  },
  {
    "title": "Change the first word with last in String",
    "body": "Implement a function which change the first word with last in String",
    "example": "text = Hello world, result => world Hello",
    "level": "easy"
  },
  {
    "title": "Change the first element with last in Array",
    "body": "Implement a function which Change the first element with last in Array",
    "example": "[1,2,3,4], result => [4,3,2,1]",
    "level": "easy"
  },
  {
    "title": "Number of Armstrong",
    "body": "The k-digit number N is an Armstrong number if and only if the k-th power of each digit sums to N.\n\nGiven a positive integer N, return true if and only if it is an Armstrong number.",
    "example": "Input: 153\nOutput: true\nExplanation: \n153 is a 3-digit number, and 153 = 1^3 + 5^3 + 3^3; Input: 123\nOutput: false\nExplanation: \n123 is a 3-digit number, and 123 != 1^3 + 2^3 + 3^3 = 36.",
    "level": "easy"
  },
  {
    "title": "Alternate capitalization",
    "body": "Given a string, capitalize the letters that occupy even indexes and odd indexes separately, and return as shown below. Index 0 will be considered even.",
    "example": "For example, capitalize(\"abcdef\") = ['AbCdEf', 'aBcDeF']. The input should be a lowercase string with no spaces)",
    "level": "easy"
  },
  {
    "title": "Valid Anagram",
    "body": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
    "example": "Example 1:\n\nInput: s = \"anagram\", t = \"nagaram\"\n\nOutput: true; Input: s = \"rat\", t = \"car\"\n\nOutput: false",
    "level": "easy"
  },
  {
    "title": "Add Binary",
    "body": "Given two binary strings a and b, return their sum as a binary string.",
    "example": "Example 1:\n\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"; Example 2:\n\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"",
    "level": "easy"
  },
  {
    "title": "3Sum",
    "body": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.",
    "example": "Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]], Input: nums = [0,1,1]\nOutput: [], Input: nums = [0,0,0]\nOutput: [[0,0,0]]",
    "level": "easy"
  },
  {
    "title": "Warm days",
    "body": "Find the number of days when the temperature was higher or equal to a certain set temperature.",
    "example": "{25, 30, 20, 28, 22, 35, 18}, temp = 25, result = 3",
    "level": "easy"
  },
  {
    "title": "Find First Palindromic String in the Array",
    "body": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\n\nA string is palindromic if it reads the same forward and backward.",
    "example": "Input: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first; Input: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".",
    "level": "easy"
  },
  {
    "title": "Zero max",
    "body": "Return a version of the given array where each zero value in the array is replaced by the\n    largest odd value to the right of the zero in the array.\n    If there is no odd value to the right of the zero, leave the zero as a zero.",
    "example": "zeroMax([0, 5, 0, 3]) → [5, 5, 3, 3]\n    zeroMax([0, 4, 0, 3]) → [3, 4, 3, 3]\n        zeroMax([0, 1, 0]) → [1, 1, 0]",
    "level": "easy"
  },
  {
    "title": "Double sort",
    "body": "Implement Double sorting, in the context of sorting algorithms, generally refers to sorting a list based on two criteria.",
    "example": "",
    "level": "easy"
  },
  {
    "title": "The decorator pattern",
    "body": "Implement Decorator is a structural design pattern",
    "example": "",
    "level": "easy"
  },
  {
    "title": "The builder pattern",
    "body": "Implement The builder pattern",
    "example": "",
    "level": "easy"
  },
  {
    "title": "The reverse integer",
    "body": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
    "example": "Input: x = 123\nOutput: 321, Input: x = -123\nOutput: -321, Input: x = 120\nOutput: 21",
    "level": "easy"
  },
  {
    "title": "Find Closest Number to Zero",
    "body": "Given an integer array nums of size n, return the number with the value closest to 0 in nums. If there are multiple answers, return the number with the largest value.",
    "example": "Input: nums = [-4,-2,1,4,8]\nOutput: 1, Input: nums = [2,-1,1]\nOutput: 1",
    "level": "easy"
  },
  {
    "title": "Counting Bits",
    "body": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.",
    "example": "Input: n = 2, Output: [0,1,1], Explanation:\n0 --> 0\n1 --> 1\n2 --> 10; Input: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101",
    "level": "easy"
  },
  {
    "title": "Valid Boomerang",
    "body": "Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.\n\nA boomerang is a set of three points that are all distinct and not in a straight line.",
    "example": "Example 1:\n\nInput: points = [[1,1],[2,3],[3,2]]\nOutput: true; Example 2:\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: false",
    "level": "easy"
  },
  {
    "title": "Valid Boomerang",
    "body": "Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.\n\nA boomerang is a set of three points that are all distinct and not in a straight line.",
    "example": "Example 1:\n\nInput: points = [[1,1],[2,3],[3,2]]\nOutput: true; Example 2:\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: false",
    "level": "easy"
  },
  {
    "title": "Count Vowels in a String",
    "body": "Write a method that counts the number of vowels (a, e, i, o, u) in a given string. The method should ignore case.",
    "example": "text = test, result => 1",
    "level": "easy"
  },
  {
    "title": "Basic Banking Application (Object-Oriented)",
    "body": "Create a simplified banking application. Define a BankAccount class with attributes like accountNumber, accountHolderName, and balance. The class should have methods for:\n 1. Depositing money.\n 2. Withdrawing money (ensure sufficient balance).\n 3. Displaying account details; Then, create a Bank class that manages multiple BankAccount objects (e.g., using a List or Map). The Bank class should provide methods to:\n 1. Create a new bank account.\n 2. Find an account by account number.\n 3. Perform deposits and withdrawals on specific accounts.\n 4. Display details of all accounts; Hint: This exercise emphasizes object-oriented principles.\n\n",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Basic Calculator",
    "body": "Create a console-based Java application that acts as a simple calculator. It should prompt the user to enter two numbers and then choose an operation (addition, subtraction, multiplication, or division). After the user makes their selections, the program should perform the calculation and display the result. You should handle potential InputMismatchException for non-numeric input and ArithmeticException for division by zero.",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Student Management System (Console-Based)",
    "body": "Develop a console application to manage student records. The application should allow users to: \n 1. Add a new student (with properties like ID, name, age, and a list of courses). \n 2. Display details of all students. \n 3. Find a student by ID and display their details. \n 4. Update a student's age or courses.\n 5. Delete a student by ID; \n Hint: Use a List (e.g., ArrayList) to store Student objects. Each Student should be a separate class with appropriate attributes and methods.",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Simple Inventory Management",
    "body": "Design a small inventory management system for a store. The system should allow users to:\n 1. Add new products (with properties like product ID, name, price, and quantity in stock). \n 2. Display all products and their current stock. \n 3. Update the quantity of a specific product. \n  4. Search for a product by name or ID.\n 5. Remove a product from the inventory; Hint: Again, use a List or Map (e.g., HashMap) to store Product objects, where Product is a separate class. Consider how to handle duplicate product IDs.",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Text File Analyzer",
    "body": "Write a Java program that takes a text file as input and performs the following analyses: \n 1. Counts the total number of words in the file.\n 2. Counts the total number of lines in the file.\n 3. Counts the occurrences of each unique word (case-insensitive).\n 4. Finds the 5 most frequent words. Hint: The program should handle FileNotFoundException and other potential IOExceptions. You will need to use FileReader, BufferedReader, and potentially Scanner for file processing, along with data structures like Map for word counts.",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Check for Prime Number",
    "body": "Write a method that checks whether a given integer is a prime number. Return true if it is prime, otherwise return false.",
    "example": "2: The smallest prime number, and the only even prime number.\n3: Divisible only by 1 and 3.\n5: Divisible only by 1 and 5.\n7: Divisible only by 1 and 7.\n11: Divisible only by 1 and 11",
    "level": "easy"
  },
  {
    "title": "Sum of Digits",
    "body": "Write a method that takes a positive integer and returns the sum of its digits.",
    "example": "For example, 123 should return 6",
    "level": "easy"
  },
  {
    "title": "Simple Calculator (Switch Case)",
    "body": "Implement a basic calculator that supports +, -, *, and /. The user provides two numbers and an operator, and the method returns the result.",
    "example": "",
    "level": "easy"
  },
  {
    "title": "Create a Person Class",
    "body": "Create a Person class with the fields name, age, and email. Add constructors, getters, setters, and a method to display the information.",
    "example": "Hint: Think about validation (input integrity), string formatting and immutability",
    "level": "easy"
  },
  {
    "title": "The shortest path",
    "body": "A string consisting of the letters 'X', 'Y' and '0' is given.\nIt is necessary to find the shortest distance between the letters 'X' and 'y' to get the value 0 if 'X' or 'Y' are missing.",
    "example": "\"үү\" -> Ө\n\"XX\" -> Ө\n\"XY\" -> 1\n\"YOX\" -> 2\n\"000XOOYOXO\" -> 2\n\"000X0OY\" -> 2",
    "level": "medium"
  },
  {
    "title": "Binary Tree Right Side View",
    "body": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.",
    "example": "Input: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4];   Input: root = [1,null,3]\nOutput: [1,3];    Input: root = []\nOutput: []",
    "level": "medium"
  },
  {
    "title": "House Robber",
    "body": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "example": "Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4;   Input: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.",
    "level": "medium"
  },
  {
    "title": "Rotate Array",
    "body": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\n\n",
    "example": "Input: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n; Input: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]",
    "level": "medium"
  },
  {
    "title": "Repeated DNA Sequences",
    "body": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\nFor example, \"ACGAATTCCG\" is a DNA sequence.\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\n\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.",
    "example": "Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]; Input: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]",
    "level": "medium"
  },
  {
    "title": "Daily Temperatures",
    "body": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.",
    "example": "Input: temperatures = [73,74,75,71,69,72,76,73], Output: [1,1,4,2,1,1,0,0] \n Input: temperatures = [30,40,50,60], Output: [1,1,1,0] \n Input: temperatures = [30,60,90], Output: [1,1,0]",
    "level": "medium"
  },
  {
    "title": "Longest Word in Dictionary",
    "body": "Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\n If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n Note that the word should be built from left to right with each additional character being added to the end of a previous word. \n",
    "example": "Input: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"], Output: \"world\", Explanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\". \n Input: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"], Output: \"apple\", Explanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\". \n",
    "level": "medium"
  },
  {
    "title": "Reverse Words in a String",
    "body": "Given an input string s, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
    "example": "Input: s = \"the sky is blue\", Output: \"blue is sky the\";\n Input: s = \"  hello world  \", Output: \"world hello\", Explanation: Your reversed string should not contain leading or trailing spaces.;\n Input: s = \"a good   example\", Output: \"example good a\", Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.",
    "level": "medium"
  },
  {
    "title": "The Truck problem",
    "body": "You need to write three classes:\n 1st class car, the car has a default maximum speed of 100 km/h, the name and condition are empty/ loaded\n2 - The car's heir is a passenger car. By default, any passenger car is not loaded. However, this state can only change after the car is created (not during creation). \n3 - The car's heir is a cargo truck. By default, any truck is loaded. However, this state can change both during the creation of the car and after. \nAt the same time, the maximum speed of this car depends on the workload. If it is loaded, then its speed drops by half.\nAs well: \nIt is necessary to implement the ability to compare trucks by name and current maximum speed.\n It is necessary to write code that verifies the correctness of the implementation of tasks (speed versus workload, truck comparisons)",
    "example": "Nothing",
    "level": "medium"
  },
  {
    "title": "Validate IP Address",
    "body": "Write a method that takes a string and determines whether it is a valid IPv4 or IPv6 address. Return \"IPv4\" if valid IPv4, \"IPv6\" if valid IPv6, or \"Neither\" if invalid.",
    "example": "\"172.16.254.1\" → \"IPv4\", \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" → \"IPv6, \"256.256.256.256\" → \"Neither\"",
    "level": "medium"
  },
  {
    "title": "Implement a Custom Stack with Min Function",
    "body": "Design and implement a CustomStack class that supports push(int), pop(), peek(), and getMin() — all in constant time.\nThe getMin() method should return the smallest element in the stack.",
    "example": "Concepts Tested:\n\nStack implementation\n\nConstant-time algorithms\n\nAuxiliary data structures",
    "level": "medium"
  },
  {
    "title": "Group Anagrams",
    "body": "Given a list of strings, group them by anagrams. Return a list of grouped anagrams, where each group contains strings that are anagrams of each other.",
    "example": "Example Input: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], Expected Output Format: [\n  [\"eat\", \"tea\", \"ate\"],\n  [\"tan\", \"nat\"],\n  [\"bat\"]\n]; Concepts Tested:\n\nString manipulation\n\nHashing and grouping\n\nWorking with Map and List collections",
    "level": "medium"
  },
  {
    "title": "Implement a Thread-Safe Singleton Logger",
    "body": "Create a singleton Logger class that ensures only one instance is used throughout the application. The logger should be thread-safe and lazily initialized. Add a method to write messages to a log file with timestamps.",
    "example": "",
    "level": "medium"
  },
  {
    "title": "Create a Custom HashMap Implementation",
    "body": "Implement a simplified version of HashMap<K, V> using an array of buckets and linked lists for collision handling. Provide support for basic operations: put(), get(), remove(), and containsKey()",
    "example": "",
    "level": "medium"
  },
  {
    "title": "Implement an Event Scheduler System",
    "body": "Design and implement a class EventScheduler that allows scheduling tasks to run at a specified future time. Each task should be a Runnable. Provide functionality to cancel scheduled tasks.",
    "example": "",
    "level": "medium"
  },
  {
    "title": "Build a File Search Utility",
    "body": "Develop a program that recursively searches through a directory and its subdirectories to find all files matching a given filename pattern (e.g., all .txt files containing a certain keyword).",
    "example": "",
    "level": "medium"
  },
  {
    "title": "Top K Frequent Elements",
    "body": "Given an integer array and an integer k, return the k most frequent elements. Optimize for time complexity better than O(n log n)",
    "example": "Input: nums = [1,1,1,2,2,3], k = 2, Output: [1,2]",
    "level": "hard"
  },
  {
    "title": "Best Time to Buy and Sell Stock IV",
    "body": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\n\nFind the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "example": "Input: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2; Input: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.",
    "level": "hard"
  },
  {
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "body": "RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n\nImplement the RandomizedCollection class:\n\nRandomizedCollection() Initializes the empty RandomizedCollection object.\nbool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\nbool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\nint getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.\nYou must implement the functions of the class such that each function works on average O(1) time complexity.\n\nNote: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.\n\n",
    "example": "Input\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]",
    "level": "hard"
  },
  {
    "title": "Longest Increasing Path in a Matrix",
    "body": "Given an m x n integers matrix, return the length of the longest increasing path in matrix., From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n\n",
    "example": "Input: matrix = [[9,9,4],[6,6,8],[2,1,1]], Output: 4, Explanation: The longest increasing path is [1, 2, 6, 9]; Input: matrix = [[3,4,5],[3,2,6],[2,2,1]], Output: 4, Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.; Input: matrix = [[1]], Output: 1",
    "level": "hard"
  },
  {
    "title": "Concatenated Words",
    "body": "Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\n\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct) in the given array.",
    "example": "Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"], Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"], Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\"; Input: words = [\"cat\",\"dog\",\"catdog\"], Output: [\"catdog\"]",
    "level": "hard"
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "body": "Given a string, find the length of the longest substring without repeating characters.",
    "example": "Input: \"abcabcbb\", Output: 3 (substring is \"abc\")",
    "level": "hard"
  },
  {
    "title": "Word Ladder (Transform Words with Dictionary)",
    "body": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",
    "example": "Example 1:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long \n Example 2:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.",
    "level": "hard"
  }
]